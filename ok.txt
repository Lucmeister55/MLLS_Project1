from sklearn.ensemble import GradientBoostingRegressor
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV

X_train = train_data_red.loc[:, all_features]
X_test = test_data.loc[:, all_features]

y_train = train_data_red["Totaal"]
y_test = gtest_data["Totaal"]

param_grid = {
    'gradientboostingregressor__n_estimators': [100, 200, 300],
    'gradientboostingregressor__learning_rate': [0.01, 0.1, 0.2],
    'gradientboostingregressor__max_depth': [3, 4, 5]
}

GBReg = make_pipeline(SelectFromModel(Lasso()), StandardScaler(), GradientBoostingRegressor())

grid_search = GridSearchCV(pipe, param_grid=param_grid).fit(X_train, y_train).fit()

GBReg.fit(X_train, y_train) # fit the model on the training data
y_hat_train = GBReg.predict(X_train) # predict training data

y_hat_test = GBReg.predict(X_test) # predict test data

R_train = GBReg.score(X_train, y_train) # Training set R²
R_test = GBReg.score(X_test, y_test) # Test set R²

print('Train set R²: {}'.format(R_train))
print('Test set R²: {}'.format(R_test))

from sklearn.metrics import r2_score
import hyperopt as hp

X_train = train_data_red.loc[:, all_features]
X_test = test_data.loc[:, all_features]

y_train = train_data_red["Totaal"]
y_test = gtest_data["Totaal"]

dmatrix = xgb.DMatrix(X_train, label=y_train)

space={'max_depth': hp.quniform("max_depth", 3, 18, 1),
        'gamma': hp.uniform ('gamma', 1,9),
        'reg_alpha' : hp.quniform('reg_alpha', 40,180,1),
        'reg_lambda' : hp.uniform('reg_lambda', 0,1),
        'colsample_bytree' : hp.uniform('colsample_bytree', 0.5,1),
        'min_child_weight' : hp.quniform('min_child_weight', 0, 10, 1),
        'n_estimators': 180,
        'seed': 0
    }

params = {
    'objective': 'reg:squarederror',  # for regression tasks
    'max_depth': 2,
    'learning_rate': 0.222,
    'eta': 0.3
}

XGBReg =  xgb.train(params, dmatrix)

y_hat_train = XGBReg.predict(xgb.DMatrix(X_train))
y_hat_test = XGBReg.predict(xgb.DMatrix(X_test))

R_train = r2_score(y_train, y_hat_train) # Training set R²
R_test = r2_score(y_test, y_hat_test) # Test set R²

print('Train set R²: {}'.format(R_train))
print('Test set R²: {}'.format(R_test))

plot_diff(y_train, y_hat_train, y_test, y_hat_test)